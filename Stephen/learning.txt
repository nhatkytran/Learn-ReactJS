--- S1 ---

5. Critical Questions

--> What's React all about?

--> React does 2 things for us
+ Displays HTML
+ Changes that HTML when the user does something
--> When using React, at the end of the day, it is still HTML \
that is causing content to appear on the screen of the user's browser
--> React as being like a wrapper around HTML of sorts

--> React Components?

--> Functions that return JSX (stuff that looks like HTML) --> Tells React what to show on the screen
--> A project can have many components that work together
--> Each individual component is in charge of displaying content \
for a certain portion of the application
--> Coordinate the flow of information of all components

--> PureComponent? --> PureComponent is similar to Component but it skips re-renders for same props and state.

--> JSX?

--> The stuff that looks like HTML --> Tells React to \
+ Create a normal HTML <div></div>
+ Show another component <Component /> --> Nested Component starts with Capital letter
--> JSX element starts with lowercase --> HTML element
--> Starts with uppercase --> Component

6. More Critical Questions

--> How does a React app start up?

Step 1 --> All of your project's JS files are 'bundled' together into a single file, \
            then placed onto a server --> bundle.js or App Bundle
Step 2 --> User makes request to the server and gets an HTML file + the bundle
Step 3 --> User's browser executes your code

--> Browser executes your code

Step 1 --> Find the div with id of 'root' in the DOM
const rootElement = document.getElementById('root');

Step 2 --> Tell React to take control of that element
const root = ReactDOM.createRoot(rootElement)

Step 3 --> Tell React to get JSX from the App component, turn it into HTML, and show it in the root
root.render(<App />)

--> What is the 'useState' functions?

- 'useState' is a function that works with React's 'state' system
- State is like variable in React
- State is used to store data that changes over time
- Whenever state changes, React automatically updates content on the screen

8. Creating a React Project

npx create-react-app < name >

9. What is Create React App?

--> JSX files (index.js, App.js, reportWebVitals.js) --> Invalid JS code --> Browser doesn't know how to execute
            Create React App Dev Server
JSX files --> Babel --> Webpack --> bundle.js

--> Babel --> Tool to turn JSX into normal JS code
--> Webpack --> Tool to merge all project files into a single file


--- S2 ---

10. Showing basic content

--> Understand index.js (take a look at ./jxs/index.js)

--> The React library is a library that understands what a component is and it knows \
how to make multiple components work together to create usable application
--> The ReactDOM library that knows how to take a set of components, \
turn them into HTML, and show them on the screen of the browser

--> The React library --> The base library
--> Goes with different libraries like (ReactDOM) --> show components in different environments

11. What is JSX? --> React.createElement

--> JSX is what we write out inside of a component to tell React what we want to show on the screen
--> <h1>Hi there!</h1> --> Babel --> React.createElement('h1', null, 'Hi there!')

--> babeljs.io/repl

--> Why JSX instead of React.createElement?
--> Helps our lives as developers a little bit easier --> JSX is easier to understand than React.createElement
--> JSX helps Rendering logic go with UI logic

--> JSX creates an instruction for React, telling it to make element
--> We have to return it from a component for React to use it

12. Printing JavaScript Variables in JSX

--> <h1>{message}</h1>
--> Curly braces mean referencing a JS variable or expression
--> Common data types to display --> String and Number
--> Boolean, Array, undefined, null --> not show up as expected
--> Object --> <h1>{{ name: 'Ky' }}</h1> --> Error

--> JSX is also an expression --> React.createElement
--> After compilation, JSX expressions become regular JavaScript function calls and evaluate to JavaScript objects
--> This means that you can use JSX inside of if statements and for loops, assign it to variables, \
accept it as arguments, and return it from functions

13. Shorthand JS Expressions

<h1>{new Date().toLocaleTimeString()}</h1>

16. Typical Component Layouts

--> Component Layout
+ Code to compute values we want to show in our JSX
+ Content we want component to show

<h1>{name} {age}</h1>
<h1>My name is {name} and my age is {age}</h1>

17. Customizing Elements with Props

--> Props --> Customizes an element --> like attributes on HTML
--> type="number", min={5}
+ Name of the property we want to customize
+ Value for the property
--> There are very small differences between HTML attributes and JSX props

--> Strings --> Wrap with double quotes
--> Numbers --> Wrap with curly braces
--> Arrays, Objects, Variables --> Wrap with curly braces --> {variable}, {[1, 2, 3]}, {{ color: 'red' }}

--> Object
+ Display object --> doesn't work
+ Provide an object as a prop --> OK

ReactDOM.createElement
const element = {
  type: 'h1',
  props: {
    className: 'greeting',
    children: 'Hello, world!'
  }
};
--> These objects are called “React elements”.

--> JSX prevents Injection Attacks --> Prevents XSS (cross-site-scripting)
--> It's safe to embed user input in JSX
--> By default, React DOM escapes any values embedded in JSX before rendering them
& becomes &amp;
< becomes &lt;
> becomes &gt;
--> Everything is converted to a string before being rendered

18. Converting HTML to JSX

--> 5 rules --> 2 - 2 - 1
--> Rule 1 --> All prop names follow camelCase --> maxlength --> maxLength
--> Rule 2 --> Number attributes use curly braces
--> Rule 3 --> Boolean 'true' can be written with just the property name. \
'false' should be written with curly braces
--> Rule 4 --> The 'class' attribute is written as 'className' --> JS als has a keyword class --> Avoid confusion
--> Rule 5 --> In-line styles are provided as objects

19. Applying Styling in JSX --> Using object for In-line styles

20. Extracting Components

21. Module Systems Overview


---

1. Rendering Elements

--> JSX --> React element --> An element describes what you want to see on the screen
--> React element is immutable --> represents the UI at a certain point in time
--> React only updates what's necessary

2. Components and Props

--> Component accepts a single 'props' object argument with data and returns a React element

--> React elements that represent DOM tags --> const element = <div />;
--> User-defined components --> const element = <Welcome name="Sara" />;

--> lowercase --> DOM tags
--> uppercase --> User-defined component

function Welcome(props) {
  return <h1>Hello, {props.name}</h1>;
}
--> <Welcome name="Sara" />

--> When React sees an element representing a user-defined component, it passes JSX \
attributes and children to this component as a single object. We call this object “props”.

--> Props is immutable
--> Name props from the component's own point of view rather tha the context in which it is being used

--> Pure function --> The function do not attempt to change their inputs, and always return \
the same result for the same input
--> All React components must act like pure functions with respect to their props

3. State and Lifecycle

--> useState --> React state system
--> state is like variable in React --> stores data that changes over time
--> state changes --> React automatically updates the UI

--> State is similar top props, but it is private and fully controlled by the component --> Encapsulation

--> Lifecycle
+ mounting --> Component is rendered to the DOM for the first time
+ unmounting --> The DOM produced by the Component is removed
--> Component mounts and unmounts

--> Lifecycle methods: componentDidMount, componentWillUnmount

--> state v/s props

--> state is encapsulated and porps is not --> can not pass state but can pass props
--> state is mutable is props is immutable
