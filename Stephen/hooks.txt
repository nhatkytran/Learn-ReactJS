1. Hooks at a Glance

--> What is a Hook?
--> Hooks are functions that let us 'hook into' React state and lifecycle features from function components
--> Hooks don't work inside classes --> Hooks let us use React with out classes

--> Effect Hook (useEffect)
--> Side effects (or "effects" for short) such as data fetching (calls API), changing the DOM, subscriptions,...
--> Called "side effects" because thay can affect other components and can't be done during rendering

--> useEffect --> componentDidMount, componentDidUpdate, componentWillUnmount --> unified into a single API

--> By default, React runs the effects after every render - including the first render
--> "clean up" function runs when component unmounts, as well as before re-running the effect due to subsequent render

--> useState & useEffect --> can be used more than once in a single component

--> Rules of Hooks
--> Hooks are JavaScript function, but they impose 2 additional rules:
+ Only call Hooks at the top level --> Don't call Hooks inside loops, conditions or nested functions
+ Only call Hooks from React function components (but you can call Hooks in your own custom Hooks)

--> Building Your Own Hooks

--> Name a custom hook ---> use... --> React linter plugin see the "use" keyword and knows \
this is a custom hooks
--> Why we need a Custom Hook --> To reuse some stateful logic between components without adding \
more components, without render props or higher-order components
